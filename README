Implementations: 
1. Waitx():
    -> Works exactly like wait but updates the parameters wTime and rTime whos pointers are sent as arguments.
    -> rTime for a process is struct proc->rtime which is updated on every tick update in the trap function.
    -> wTime = etime-ctime-rtime (all from struct proc). ctime is set on process creation in allocproc() and etime is set on process exit in exit() and kill()

2. Getpinfo():
    -> Takes two integers as input, address to stuct proc_stat and pid.
    -> updates the feilds of struct proc_stat from the feilds from struct proc. 
    -> num_run for a process is updated everytime it is allocated to a processor.

3. FCFS:
    -> yeild function is called only in exit() function to ensure no preemption.
    -> scheduler finds the process with lowest ctime and assigns it to the processor.

4. PBS:
    -> scheduler finds the lowest value of p->prior (highest priority).
    -> it loops over all processes and allotes the processor to every process with prior value equal to what it found (Like in default scheduler)

